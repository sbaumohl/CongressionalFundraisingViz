//! SeaORM Entity. Generated by sea-orm-codegen 0.9.2

use async_graphql::{ComplexObject, Context, SimpleObject};
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, SimpleObject)]
#[graphql(complex, name = "Committees")]
#[sea_orm(table_name = "committees")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub name: String,
    pub designation: String,
    pub org_type: String,
    pub connected_org: Option<String>,
    pub candidate_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::members::Entity",
        from = "Column::CandidateId",
        to = "super::members::Column::FecCandidateId",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Members,
    #[sea_orm(has_many = "super::independent_expenditures::Entity")]
    IndependentExpenditures,

    #[sea_orm(has_many = "super::committee_contributions::Entity")]
    CommitteeContributions,
}

impl Related<super::members::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Members.def()
    }
}

impl Related<super::independent_expenditures::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::IndependentExpenditures.def()
    }
}

impl Related<super::committee_contributions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CommitteeContributions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[ComplexObject]
impl Model {
    async fn independent_expenditures(
        &self,
        ctx: &Context<'_>,
    ) -> Result<Vec<super::independent_expenditures::Model>, DbErr> {
        let db = ctx.data::<DatabaseConnection>().unwrap();
        self.find_related(super::independent_expenditures::Entity)
            .all(db)
            .await
    }

    async fn committee_contributions(
        &self,
        ctx: &Context<'_>,
    ) -> Result<Vec<super::committee_contributions::Model>, DbErr> {
        let db = ctx.data::<DatabaseConnection>().unwrap();
        self.find_related(super::committee_contributions::Entity)
            .all(db)
            .await
    }
}
