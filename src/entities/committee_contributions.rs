//! SeaORM Entity. Generated by sea-orm-codegen 0.9.2

use async_graphql::{SimpleObject, ComplexObject, Context, async_trait, dataloader::*};
use sea_orm::entity::prelude::*;
use async_graphql::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, SimpleObject)]
#[graphql(complex, name = "CommitteesContributions")]
#[sea_orm(table_name = "committee_contributions")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub spender_committee: String,
    pub election_cycle: String,
    pub recipient_committee: String,
    pub recipient_candidate: String,
    pub amount: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::members::Entity",
        from = "Column::RecipientCandidate",
        to = "super::members::Column::FecCandidateId",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Members,
    #[sea_orm(
        belongs_to = "super::committees::Entity",
        from = "Column::RecipientCommittee",
        to = "super::committees::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Committees2,
    #[sea_orm(
        belongs_to = "super::committees::Entity",
        from = "Column::SpenderCommittee",
        to = "super::committees::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Committees1,
}

// If I want to find Disbursements from a recieving candidate, use a candidate_id -> disbursement
// Otherwise, find it through the spending committee 

impl Related<super::members::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Members.def()
    }
}

impl Related<super::committees::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Committees1.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[ComplexObject]
impl Model {
    async fn members(&self, ctx: &Context<'_>) -> Result<Vec<super::members::Model>, DbErr> {
        let db = ctx.data::<DatabaseConnection>().unwrap();
        self.find_related(super::members::Entity).all(db).await
    }

    async fn committee(&self, ctx: &Context<'_>) -> Result<Option<super::committees::Model>, DbErr> {
        let db = ctx.data::<DatabaseConnection>().unwrap();
        self.find_related(super::committees::Entity).one(db).await
    }

}